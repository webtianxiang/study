(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{296:function(t,e,n){"use strict";n.r(e);var a=n(0),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"vue中定时器的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue中定时器的使用"}},[t._v("#")]),t._v(" Vue中定时器的使用")]),t._v(" "),n("p",[t._v("js中定时器有两种：\n1⃣️ 一个是循环执行：setInterval\n2⃣️ 另一个是定时执行：setTimeout")]),t._v(" "),n("h2",{attrs:{id:"循环执行：setinterval"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#循环执行：setinterval"}},[t._v("#")]),t._v(" 循环执行：setInterval")]),t._v(" "),n("pre",[n("code",[t._v("1. 定义：循环执行就是设置一个时间间隔，每过一段时间都会执行一次这个方法,直到这个定时器被销毁\n掉\n2.用法：用法是setInterval（“方法名或方法”，“延时”）， 第一个参数为方法名或者方法，注意为方\n法名的时候不要加括号,第二个参数为时间间隔\n3.停止执行：clearInterval，用于停止 setInterval() 方法执行的函数代码\n4.用例:\n    if (this.timer) clearInterval(this.timer)\n    this.timer = setInterval(() => {\n      this.getQueryRealTimeMetricState()\n    }, this.intervalTime)\n")])]),t._v(" "),n("h2",{attrs:{id:"定时执行：settimeout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定时执行：settimeout"}},[t._v("#")]),t._v(" 定时执行：setTimeout")]),t._v(" "),n("pre",[n("code",[t._v("1.定义：定时执行setTimeout是设置一个时间，等待时间到达的时候只执行一次，但是执行完以后定时\n器还在，只是没有运行\n2.用法：是setTimeout(“方法名或方法”, “延时”); 第一个参数为方法名或者方法，注意为方法名的\n时候不要加括号,第二个参数为时间间隔\n3.用例：\n    if (this.timer) clearTimeout(this.timer)\n        this.timer = setTimeout(() => {\n        this.loading = true\n        this.remoteMethod(val, (data = []) => {\n            if (!Array.isArray(data)) {\n                return console.log(new Error(`the arguments must be an array`)）\n            }\n            if (Array.isArray(this.value)) {\n                // 多选\n                // 需将之前选中的同样增加到items中，防止之前选中的不显示（实际任然存在）\n                this.$emit('update:items', this.value.concat(data))\n            } else {\n                // 单选\n                this.$emit('update:items', data)\n            }\n        }).then(() => {\n            this.loading = false\n        }).catch(() => {\n            this.loading = false\n        })\n        }, 300)\n")])]),t._v(" "),n("h2",{attrs:{id:"定时器使用注意事项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定时器使用注意事项"}},[t._v("#")]),t._v(" 定时器使用注意事项")]),t._v(" "),n("pre",[n("code",[t._v("1. 定时器需要在页面销毁的时候清除掉，不然会一直存在！！！\n2.在使用setInterval方法时，每一次启动都需要对setInterval方法返回的值做一个判断，判断是否\n是空值，若不是空值，则要停止定时器并将值设为空，再重新启动，如果不进行判断并赋值，有可能会造\n成计时器循环调用，在同等的时间内同时执行调用的代码，并会随着代码的运行时间增加而增加，导致功\n能无法实现，甚至占用过多资源而卡死奔溃。因此在每一次使用setInterval方法时，都需要进行一次判\n断。\n3.vue中的setInterval在页面离开之后仍会执行，在切换多个路由之后，定时器的速度会越来越快。\n解决方法：\n    beforeDestroy() {\n        if(this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n")])])])}),[],!1,null,null,null);e.default=r.exports}}]);