(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{212:function(e,n,t){"use strict";t.r(n);var a=t(0),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"网页布局（layout）是-css-的一个重点应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网页布局（layout）是-css-的一个重点应用"}},[e._v("#")]),e._v(" 网页布局（layout）是 CSS 的一个重点应用")]),e._v(" "),t("h2",{attrs:{id:"flex布局学习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flex布局学习"}},[e._v("#")]),e._v(" flex布局学习")]),e._v(" "),t("h3",{attrs:{id:"一、flex布局是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、flex布局是什么"}},[e._v("#")]),e._v(" 一、Flex布局是什么")]),e._v(" "),t("p",[e._v('Flex 是 Flexible Box 的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性。\n1⃣️ 任何一个容器都可以指定为 Flex 布局。\n.box {\ndisplay: flex;\n}\n2⃣️ 行内元素也可以使用 Flex 布局。\n.box {\ndisplay: inline-flex;\n}\n3⃣️ Webkit 内核的浏览器，必须加上-webkit前缀。\n.box {\ndisplay: -webkit-flex; /* Safari */\ndisplay: flex;\n}\n4⃣️ 注意：设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。')]),e._v(" "),t("h3",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),t("pre",[t("code",[e._v('1⃣️ 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称"容器"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称"项目"。\n2⃣️ 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。\n3⃣️ 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。\n')])]),e._v(" "),t("h3",{attrs:{id:"容器的属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器的属性"}},[e._v("#")]),e._v(" 容器的属性")]),e._v(" "),t("p",[e._v('（1）设置在容器上的属性\nflex-direction、flex-wrap、justify-content、align-items、align-content、flex-flow\n1⃣️ flex-direction属性\n属性意义：属性决定主轴的方向（即项目的排列方向）。\n属性用法：\n.box {\nflex-direction: row | row-reverse | column | column-reverse;\n}\nrow（默认值）：主轴为水平方向，起点在左端。\nrow-reverse：主轴为水平方向，起点在右端。\ncolumn：主轴为垂直方向，起点在上沿。\ncolumn-reverse：主轴为垂直方向，起点在下沿。\n2⃣️ flex-wrap属性\n属性意义：默认情况下，项目都排在一条线（又称"轴线"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\n属性用法：\n.box{\nflex-wrap: nowrap | wrap | wrap-reverse;\n}\nnowrap（默认）：不换行。\nwrap：换行，第一行在上方。\nwrap-reverse：换行，第一行在下方。\n3⃣️ justify-content属性\n属性意义：justify-content属性定义了项目在主轴上的对齐方式。\n属性用法：\n.box {\njustify-content: flex-start | flex-end | center | space-between | space-around;\n}\nflex-start（默认值）：左对齐\nflex-end：右对齐\ncenter： 居中\nspace-between：两端对齐，项目之间的间隔都相等。\nspace-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n4⃣️ align-items属性\n属性意义：align-items属性定义项目在交叉轴上如何对齐。\n属性用法：\n.box {\nalign-items: flex-start | flex-end | center | baseline | stretch;\n}\nflex-start：交叉轴的起点对齐。\nflex-end：交叉轴的终点对齐。\ncenter：交叉轴的中点对齐。\nbaseline: 项目的第一行文字的基线对齐。\nstretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n5⃣️ align-content属性\n属性意义：align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n属性用法：\n.box {\nalign-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\nflex-start：与交叉轴的起点对齐。\nflex-end：与交叉轴的终点对齐。\ncenter：与交叉轴的中点对齐。\nspace-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\nspace-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\nstretch（默认值）：轴线占满整个交叉轴。\n6⃣️ flex-flow属性\n属性意义：flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n属性用法：\n.box {\nflex-flow: [flex-direction] || [flex-wrap];\n}')]),e._v(" "),t("h3",{attrs:{id:"项目上的属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目上的属性"}},[e._v("#")]),e._v(" 项目上的属性")]),e._v(" "),t("p",[e._v("（1）设置在项目上的属性\norder、flex-grow、flex-shrink、flex-basis、flex、align-self\n1⃣️ order属性\n属性意义：order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n属性用法：\n.item {\norder: [integer];\n}\n按照interger的数值大小排序，越大越靠后\n2⃣️ flex-grow属性\n属性意义：flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n属性用法：\n.item {\nflex-grow: [number]; /* default 0 "),t("em",[e._v("/\n}\n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n3⃣️ flex-shrink属性\n属性意义：flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n属性用法：\n.item {\nflex-shrink: [number]; /")]),e._v(" default 1 "),t("em",[e._v("/\n}\n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n负值对该属性无效。\n4⃣️ flex-basis属性\n属性意义：flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n属性用法：\n.item {\nflex-basis: [length]| auto; /")]),e._v(" default auto */\n}\n它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n5⃣️ flex属性\n属性意义：flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n属性用法：\n.item {\nflex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n6⃣️ align-self属性\n属性意义：align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。\n属性用法：\n.item {\nalign-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\nauto（默认值）：表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\nflex-start：与交叉轴的起点对齐。\nflex-end：与交叉轴的终点对齐。\ncenter：与交叉轴的中点对齐。\nspace-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\nspace-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\nstretch：轴线占满整个交叉轴。")])])}),[],!1,null,null,null);n.default=r.exports}}]);