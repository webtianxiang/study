(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{293:function(t,n,i){"use strict";i.r(n);var e=i(0),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,i=t._self._c||n;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"git-分布式管理系统学习"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-分布式管理系统学习"}},[t._v("#")]),t._v(" Git 分布式管理系统学习")]),t._v(" "),i("pre",[i("code",[t._v('（1）学习网站：\n·菜鸟教程：https://www.runoob.com/git/git-tutorial.html\n·廖雪峰的官方网站：https://www.liaoxuefeng.com/wiki/896043488029600\n·百度百科：https://baike.baidu.com/item/GIT/12647237?fr=aladdin\n·git官网：https://git-scm.com/\n（2）学习过程：\n·创建版本库（仓库）\n    mkdir learngit            //创建目录\n    cd learngit            //进入目录\n    pwd            //用于显示当前目录\n·把这个目录变成Git可以管理的仓库\n    git init\n·把一个文件放到Git仓库（只需要两步）\n第一步：用命令git add告诉Git，把文件添加到仓库：\n    git add readme.txt\n第二步：用命令git commit告诉Git，把文件提交到仓库：\n    git commit -m "关于文件的描述或修改信息的描述"\n注：git commit 可以一次提交多个文件，所以可以多次add文件，但只需要提交一次\n·显示当前仓库状态：\n    git status\n·查看修改内容（显示的格式是Unix通用的diff格式）\n    git diff readme.txt            //查看readme.txt的修改\n·显示从最近到最远的提交日志\n    git log            //查看提交历史，以便确定回退到那个版本\n    git log --pretty=oneline            //美化输出信息格式\n·回退版本\n    git reset --hard HEAD^            //回退到上一次提交版本\n    git reset --hard HEAD^^^            //回退到上三次提交的版本\n    git reset --hard HEAD～100            //回退到上100个版本\n    git reset --hard HEAD 1094a            //回到版本号前4位位1094a的版本\n    git reflog            //查看命令历史，以便确定回到未来那个版本\ngit reset --soft HEAD 版本号        //回退到某个版本，但保留工作区修改\n·让这个文件回到最近一次git commit或git add时的状态\n    git checkout -- readme.txt\n·把暂存区的修改撤销掉（unstage），重新放回工作区：\n    git reset HEAD readme.txt\n·工作区删除文件\n    rm test.txt\n    git checkout -- test.txt            //工作区误删文件，通过这条命令用版本库中的版本替换工作区的版本\n·版本库删除文件\n    git rm text.txt\n    git commit -m "delete:text.txt"\n·把一个已有的本地仓库与github远程库关联\n    git remote add origin git@github.com:webtianxiang/learngit.git\n·把本地库的所有内容推送到远程库上：\n    git push -u origin master            //把当前分支master推送到远程由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n·本地作提交：\n    git push origin master            //把本地master分支的最新修改推送至GitHub\n·从远程库客克隆\n     git clone git@github.com:michaelliao/gitskills.git\n·查看当前分支\n    git branch            //有*的为当前分支\n·创建分支：\n    git branch <name>            //git branch dev\n·切换分支：\n    git checkout <name>            //git checkout dev\n·创建+切换分支：\n    git checkout -b <name>            //git checkout -b dev\n·合并某分支到当前分支：\n    git merge <name>            //git merge dev\n·删除分支：\n    git branch -d <name>            //git branch -d dev\n·当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n 解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。\n 用git log --graph命令可以看到分支合并图。\n·合并dev分支，请注意--no-ff参数，表示禁用Fast forward\n    git merge --no-ff -m "merge with no-ff" dev\t\t\t//合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。\n·把当前工作现场“储藏”起来，等以后恢复现场后继续工作\n    git stash\n·恢复工作现场\n    git stash pop            //恢复的同时也把stash删除了，用git stash list查看就看不到任何内容了。\n    git stash apply            //恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除。\n·强行删除分支\n    git branch -D dev\n·查看远程库的信息\n    git remote\n    git remote -v            //显示远程库的详细信息\n·推送分支\n    git push origin master            //就是吧该分支上的所有本地提交推送到远程库。推送时要指定本地分支，这样Git就会把该分支推送到远程库对应的远程分支上。\n·抓取分支，从远程库拉取分支（没有则创建）\n    git checkout -b dev origin/dev            //创建远程origin的dev分支到本地\n    git pull            //把最新的提交从origin/dev抓下来\n·指定本地dev分支与远程origin/dev分支的链接\n    git branch --set-upstream-to=origin/dev dev\n·把本地未push的分叉提交历史整理成直线\n    git rebase\n·创建标签\n    git branch            //查看所有分支\n    git checkout master            //切换到需要打标签的分支\n    git tag v1.0            //打标签\n    git tag            //查看所有标签\n·查看标签信息\n    git show v1.0            //用命令git show <tagname>可以看到说明文字\n·创建带有说明的标签，用-a指定标签名，-m指定说明文字\n    git tag -a v0.1 -m "version 0.1 released" 1094adb\n·删除标签\n    git tag -d v1.0\n·推送某个标签到远程\n    git push origin v1.0\n    git push origin --tags            //一次性推送所有未推送到远程的本地标签\n·删除已经推送到远程的标签\n    git tag -d v1.0            //先从本地删除\n    git push origin :refs/tags/v1.0            //然后，从远程删除。删除命令也是push，但是格式如下：\n')])]),t._v(" "),i("h2",{attrs:{id:"实际项目中遇到的问题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#实际项目中遇到的问题"}},[t._v("#")]),t._v(" 实际项目中遇到的问题")]),t._v(" "),i("h3",{attrs:{id:"_1-本地拉取分支时，远程仓库没有分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-本地拉取分支时，远程仓库没有分支"}},[t._v("#")]),t._v(" 1. 本地拉取分支时，远程仓库没有分支")]),t._v(" "),i("pre",[i("code",[t._v("1⃣️️ 创建本地分支\n    git checkout -b 新分支名\n2⃣️ 推送本地分支到远程仓库\n    git push --set-upstream origin 分支名\n")])]),t._v(" "),i("h3",{attrs:{id:"_2-将远程-git-仓库里的指定分支拉取到本地-本地不存在的分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-将远程-git-仓库里的指定分支拉取到本地-本地不存在的分支"}},[t._v("#")]),t._v(" 2. 将远程 git 仓库里的指定分支拉取到本地(本地不存在的分支)")]),t._v(" "),i("pre",[i("code",[t._v("1⃣️ 创建一个新的本地分支，并与指定的远程分支关联起来。\n    git checkout -b 本地分支名 origin/远程分支名\n")])]),t._v(" "),i("h3",{attrs:{id:"_3-建立本地分支与远程分支的映射关系"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-建立本地分支与远程分支的映射关系"}},[t._v("#")]),t._v(" 3. 建立本地分支与远程分支的映射关系")]),t._v(" "),i("pre",[i("code",[t._v("1⃣️ 建立当前分支与远程分支的映射关系:\n    git branch -u origin/addFile\n   或者使用命令：\n    git branch --set-upstream-to origin/addFile\n2⃣️ 撤销本地分支与远程分支的映射关系\n    git branch --unset-upstream\n")])]),t._v(" "),i("h3",{attrs:{id:"_4-回退版本并提交到远程分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_4-回退版本并提交到远程分支"}},[t._v("#")]),t._v(" 4.回退版本并提交到远程分支")]),t._v(" "),i("pre",[i("code",[t._v("1⃣️ 直接找到要回退的版本号（这里是：83ff2785）\n    git reset --hard 83ff2785\n2⃣️ reset之后，强行推送到服务器端：\n    git push --force\n    git 分支名\n3⃣️ 此时如果有人获取了更新的版本，可能拉去不下来，执行以下操作：\n    git fetch --all\n    git reset --hard origin/branchname\n")])])])}),[],!1,null,null,null);n.default=a.exports}}]);